// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"cloud.google.com/go/firestore"
	"context"
	"github.com/go-telegram/bot"
	"github.com/google/wire"
	"github.com/kriku/kpukbot/internal/clients/gemini"
	"github.com/kriku/kpukbot/internal/clients/telegram"
	"github.com/kriku/kpukbot/internal/config"
	"github.com/kriku/kpukbot/internal/handlers"
	"github.com/kriku/kpukbot/internal/logger"
	"github.com/kriku/kpukbot/internal/repository/chats"
	"github.com/kriku/kpukbot/internal/repository/messages"
	"github.com/kriku/kpukbot/internal/repository/threads"
	"github.com/kriku/kpukbot/internal/repository/users"
	chats2 "github.com/kriku/kpukbot/internal/services/chats"
	"github.com/kriku/kpukbot/internal/services/orchestrator"
	"github.com/kriku/kpukbot/internal/services/response"
	"github.com/kriku/kpukbot/internal/services/threading"
	users2 "github.com/kriku/kpukbot/internal/services/users"
	"github.com/kriku/kpukbot/internal/strategies"
	"log/slog"
)

// Injectors from wire.go:

func InitApp(ctx context.Context) (App, error) {
	slogLogger := logger.NewLogger()
	configConfig := config.NewConfig()
	client, err := ProvideGeminiClient(ctx, configConfig, slogLogger)
	if err != nil {
		return App{}, err
	}
	firestoreClient, err := NewFirestoreClient(ctx, configConfig)
	if err != nil {
		return App{}, err
	}
	threadsRepository := ProvideThreadsRepository(firestoreClient)
	messagesRepository := ProvideMessagesRepository(firestoreClient)
	classifierService := ProvideClassifierService(client, threadsRepository, messagesRepository, slogLogger)
	usersRepository := ProvideUsersRepository(firestoreClient)
	usersService := ProvideUsersService(usersRepository, slogLogger)
	chatsRepository := ProvideChatsRepository(firestoreClient)
	chatsService := ProvideChatsService(chatsRepository, slogLogger)
	v := ProvideStrategies(client, usersService, chatsService, slogLogger)
	analyzerService := ProvideAnalyzerService(client, v, slogLogger)
	orchestratorService := ProvideOrchestratorService(classifierService, analyzerService, messagesRepository, usersService, slogLogger)
	handlerFunc := ProvideOrchestratorHandler(orchestratorService, slogLogger)
	messengerClient, err := telegram.NewTelegramClient(ctx, configConfig, handlerFunc)
	if err != nil {
		return App{}, err
	}
	app := NewApp(slogLogger, messengerClient, messagesRepository, orchestratorService, firestoreClient, chatsService, v)
	return app, nil
}

// wire.go:

// ProvideGeminiClient provides a Gemini client (real or mock based on config)
func ProvideGeminiClient(ctx context.Context, cfg *config.Config, logger2 *slog.Logger) (gemini.Client, error) {
	if cfg.UseMockGemini {
		logger2.
			Info("Using mock Gemini client for local testing")
		return gemini.NewMockClient(logger2), nil
	}
	return gemini.NewGeminiClient(ctx, cfg.GeminiAPIKey, logger2)
}

// ProvideMessagesRepository provides a messages repository
func ProvideMessagesRepository(client *firestore.Client) messages.MessagesRepository {
	return messages.NewFirestoreMessagesRepository(client)
}

// ProvideThreadsRepository provides a threads repository
func ProvideThreadsRepository(client *firestore.Client) threads.ThreadsRepository {
	return threads.NewFirestoreThreadsRepository(client)
}

// ProvideUsersRepository provides a users repository
func ProvideUsersRepository(client *firestore.Client) users.UsersRepository {
	return users.NewFirestoreUsersRepository(client)
}

// ProvideChatsRepository provides a chats repository
func ProvideChatsRepository(client *firestore.Client) chats.ChatsRepository {
	return chats.NewFirestoreChatsRepository(client)
}

// ProvideUsersService provides the users service
func ProvideUsersService(repository users.UsersRepository, logger2 *slog.Logger) *users2.UsersService {
	return users2.NewUsersService(repository, logger2)
}

// ProvideChatsService provides the chats service
func ProvideChatsService(repository chats.ChatsRepository, logger2 *slog.Logger) *chats2.ChatsService {
	return chats2.NewChatsService(repository, logger2)
}

// ProvideStrategies provides all response strategies
func ProvideStrategies(geminiClient gemini.Client, usersService *users2.UsersService, chatsService *chats2.ChatsService, logger2 *slog.Logger) []strategies.ResponseStrategy {
	return []strategies.ResponseStrategy{strategies.NewIntroductionStrategy(geminiClient, usersService, chatsService, logger2), strategies.NewQuestionStrategy(geminiClient, usersService, chatsService, logger2), strategies.NewGeneralStrategy(geminiClient, logger2)}
}

// ProvideClassifierService provides the classifier service
func ProvideClassifierService(
	geminiClient gemini.Client,
	threadsRepository threads.ThreadsRepository,
	messagesRepository messages.MessagesRepository, logger2 *slog.Logger,
) *threading.ClassifierService {
	return threading.NewClassifierService(geminiClient, threadsRepository, messagesRepository, logger2)
}

// ProvideAnalyzerService provides the analyzer service
func ProvideAnalyzerService(
	geminiClient gemini.Client, strategies2 []strategies.ResponseStrategy, logger2 *slog.Logger,
) *response.AnalyzerService {
	return response.NewAnalyzerService(geminiClient, strategies2, logger2)
}

// ProvideOrchestratorService provides the orchestrator service
func ProvideOrchestratorService(
	classifier *threading.ClassifierService,
	analyzer *response.AnalyzerService,
	messagesRepository messages.MessagesRepository,
	usersService *users2.UsersService, logger2 *slog.Logger,
) *orchestrator.OrchestratorService {

	return orchestrator.NewOrchestratorService(classifier, analyzer, messagesRepository, usersService, nil, logger2)
}

// ProvideOrchestratorHandler provides the orchestrator handler
func ProvideOrchestratorHandler(
	orch *orchestrator.OrchestratorService, logger2 *slog.Logger,
) bot.HandlerFunc {
	return handlers.NewOrchestratorHandler(orch, logger2)
}

var baseSet = wire.NewSet(config.NewConfig, logger.NewLogger, NewFirestoreClient,

	ProvideGeminiClient,

	ProvideMessagesRepository,
	ProvideThreadsRepository,
	ProvideUsersRepository,
	ProvideChatsRepository,

	ProvideStrategies,
	ProvideClassifierService,
	ProvideAnalyzerService,
	ProvideUsersService,
	ProvideChatsService,
	ProvideOrchestratorService,

	ProvideOrchestratorHandler, telegram.NewTelegramClient, NewApp,
)
